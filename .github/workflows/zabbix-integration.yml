name: zabbix-integration
on:
  # TODO: push for testing only
  push:
    branches:
      - ci
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CI_EXAMPLE_BIN: clap_sender

jobs:
  temporary-passwords:
    runs-on: ubuntu-latest
    outputs:
      postgres_password: ${{ steps.postgres_password.outputs.password }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - id: postgres_password
        uses: ./.github/actions/generate-password

  build:
    runs-on: ubuntu-latest

    env:
      BUILD_FEATURES: "${{ matrix.exclusive-features }} tracing clap"

    strategy:
      matrix:
        tls:
          - openssl
          - rustls
        async:
          - blocking
          - tokio
        include:
          - async: blocking
            tls: openssl
            exclusive-features: tls_openssl
          - async: blocking
            tls: rustls
            exclusive-features: tls_rustls
          - async: tokio
            tls: openssl
            exclusive-features: "async_tokio tls_openssl tls_openssl_tokio"
          - async: tokio
            tls: rustls
            exclusive-features: "async_tokio tls_rustls tls_rustls_tokio"
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Build example for CI integration tests
        run: cargo build --verbose --features "${{ env.BUILD_FEATURES }}" --example ${{ env.CI_EXAMPLE_BIN }}

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CI_EXAMPLE_BIN }}-${{ matrix.async }}-${{ matrix.tls }}
          path: target/debug/examples/${{ env.CI_EXAMPLE_BIN }}


  test:
    runs-on: ubuntu-latest

    needs:
      - build
      - temporary-passwords

    strategy:
      matrix:
        encryption:
          - unencrypted
          # - psk
          # - cert
        tls:
          - openssl
          - rustls
        async:
          - blocking
          - tokio
        exclude:
          - encryption: psk
            tls: rustls

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.CI_EXAMPLE_BIN }}-${{ matrix.async }}-${{ matrix.tls }}

      - name: Make downloaded artifact executable
        run: chmod a+x ${{ env.CI_EXAMPLE_BIN }}

      - name: Call Zabbix API to create test Host and Items
        run: ./script/zabbix_api_setup.py --wait 120 http://localhost:8080

      - name: Call Zabbix Server to reload the config cache
        run: |
          ZABBIX_CONTAINERID=$(/usr/bin/docker ps --all --filter label=ci.service=zabbix-server --filter status=running --no-trunc --format "{{.ID}}")
          docker exec $ZABBIX_CONTAINERID zabbix_server --runtime-control log_level_increase=trapper
          timeout 60 bash -c -- "while true; do docker exec $ZABBIX_CONTAINERID zabbix_server --runtime-control config_cache_reload 2>&1 | grep -q 'Runtime control command was forwarded successfully' && break; sleep 1; done"
          # Wait for the config cache to actually reload
          sleep 5

      - name: Test item creation
        run: |
          set +e
          ./${{ env.CI_EXAMPLE_BIN }} --status-on-fail --zabbix-server localhost --input-file - <<EOF
          "CI test host" ci.test.character "Hello, world."
          "CI test host" ci.test.unsigned 54321
          "CI test host" ci.test.float 54.321
          "CI test host" ci.test.text "I have eaten
          the plums
          that were in
          the icebox

          and which
          you were probably
          saving
          for breakfast

          Forgive me
          they were delicious
          so sweet
          and so cold"
          EOF
          if [ $? -ne 0 ]; then
            ZABBIX_CONTAINERID=$(/usr/bin/docker ps --all --filter label=ci.service=zabbix-server --filter status=running --no-trunc --format "{{.ID}}")
            printf '\n\nzabbix-server container logs:\n\n'
            docker logs $ZABBIX_CONTAINERID
            exit 1
          fi

    services:
      postgres-server:
        image: postgres:latest
        env:
          POSTGRES_USER: zabbix
          POSTGRES_PASSWORD: ${{ needs.temporary-passwords.outputs.postgres_password }}
          POSTGRES_DB: zabbix
      zabbix-frontend:
        image: zabbix/zabbix-web-nginx-pgsql:latest
        env:
          POSTGRES_USER: zabbix
          POSTGRES_PASSWORD: ${{ needs.temporary-passwords.outputs.postgres_password }}
          POSTGRES_DB: zabbix
          PHP_TZ: "Etc/UTC"
          ZBX_SERVER_HOST: zabbix-server
        ports:
          - "8080:8080"
      zabbix-server:
        image: zabbix/zabbix-server-pgsql:latest
        env:
          POSTGRES_USER: zabbix
          POSTGRES_PASSWORD: ${{ needs.temporary-passwords.outputs.postgres_password }}
          POSTGRES_DB: zabbix
          # Increase the configuration cache update frequency, so API changes get reloaded
          # as fast as possible
          ZBX_CACHEUPDATEFREQUENCY: "1"
        ports:
          - "10051:10051"
        options: "--label ci.service=zabbix-server"
