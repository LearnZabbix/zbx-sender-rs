name: zabbix-integration
on:
  # TODO: push for testing only
  push:
    branches:
      - ci
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CI_EXAMPLE_BIN: clap_sender

jobs:
  temporary-credentials:
    runs-on: ubuntu-latest
    outputs:
      postgres_password: ${{ steps.postgres_password.outputs.password }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - id: postgres_password
        uses: ./.github/actions/generate-password
      - name: Generate temporary mTLS PKI
        uses: ./.github/actions/generate-pki
        with:
          pki-name: cert-pki

  build:
    runs-on: ubuntu-latest

    env:
      BUILD_FEATURES: "${{ matrix.exclusive-features }} tracing clap"

    strategy:
      matrix:
        tls:
          - openssl
          - rustls
        async:
          - blocking
          - tokio
        include:
          - async: blocking
            tls: openssl
            exclusive-features: tls_openssl
          - async: blocking
            tls: rustls
            exclusive-features: tls_rustls
          - async: tokio
            tls: openssl
            exclusive-features: "async_tokio tls_openssl tls_openssl_tokio"
          - async: tokio
            tls: rustls
            exclusive-features: "async_tokio tls_rustls tls_rustls_tokio"
    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v1.4.0
        with:
          key: example-${{ env.CI_EXAMPLE_BIN }}

      - name: Build example for CI integration tests
        run: cargo build --verbose --features "${{ env.BUILD_FEATURES }}" --example ${{ env.CI_EXAMPLE_BIN }}

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CI_EXAMPLE_BIN }}-${{ matrix.async }}-${{ matrix.tls }}
          path: target/debug/examples/${{ env.CI_EXAMPLE_BIN }}


  test:
    runs-on: ubuntu-latest

    needs:
      - build
      - temporary-credentials

    strategy:
      matrix:
        encryption:
          - unencrypted
          # - psk
          # - cert
        tls:
          - openssl
          - rustls
        async:
          - blocking
          - tokio
        exclude:
          - encryption: psk
            tls: rustls

    steps:
      - uses: actions/checkout@v3

      - name: Start job services
        run: cd .github/ci && docker-compose up --detach

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.CI_EXAMPLE_BIN }}-${{ matrix.async }}-${{ matrix.tls }}

      - name: Make downloaded artifact executable
        run: chmod a+x ${{ env.CI_EXAMPLE_BIN }}

      - name: Call Zabbix API to create test Host and Items
        # Allow Docker private subnets, in addition to localhost
        run: ./script/zabbix_api_setup.py --wait 120 --allow-ips '127.0.0.1, ::1, 172.16.0.0/12' http://localhost:8080

      - name: Reload the Zabbix Server configuration cache
        run: |
          # Get the container ID of the running Zabbix Server
          timeout 60 bash -c -- "while true; do docker exec ${{ job.services.zabbix-server.id }} zabbix_server --runtime-control config_cache_reload 2>&1 | grep 'Runtime control command was forwarded successfully' && break; sleep 1; done"
          # Wait for the config cache to actually reload
          sleep 5

      - name: Test item creation
        run: |
          # Don't exit on error; errors are handled at the end
          set +e

          # Increase the log level of Zabbix Server Trapper processes, to get useful information in case of error
          docker exec ${{ job.services.zabbix-server.id }} zabbix_server --runtime-control log_level_increase=trapper

          # Call ${{ env.CI_EXAMPLE_BIN }} to send some items to Zabbix Server
          ./${{ env.CI_EXAMPLE_BIN }} --status-on-fail --zabbix-server localhost --input-file - <<EOF
          "CI test host" ci.test.character "Hello, world."
          "CI test host" ci.test.unsigned 54321
          "CI test host" ci.test.float 54.321
          "CI test host" ci.test.text "I have eaten
          the plums
          that were in
          the icebox

          and which
          you were probably
          saving
          for breakfast

          Forgive me
          they were delicious
          so sweet
          and so cold"
          EOF

          # If ${{ env.CI_EXAMPLE_BIN }} exited with an error, print the Zabbix Server logs
          if [ $? -ne 0 ]; then
            printf '\n\nzabbix-server container logs:\n\n'
            docker logs ${{ job.services.zabbix-server.id }}
            exit 1
          fi
